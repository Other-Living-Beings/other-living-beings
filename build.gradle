buildscript {
    repositories {
        // These repositories are only for Gradle plugins, put any other repositories in the repository block further below
        maven { url = 'https://maven.minecraftforge.net' }
        maven { url = 'https://repo.spongepowered.org/repository/maven-public/' }
        maven { url = 'https://maven.parchmentmc.org' }
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
        classpath 'org.spongepowered:mixingradle:0.7-SNAPSHOT'
        classpath 'org.parchmentmc:librarian:1.+'
        classpath "gradle.plugin.com.matthewprenger:CurseGradle:1.4.0"
    }
}

apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'org.spongepowered.mixin'
apply plugin: 'org.parchmentmc.librarian.forgegradle'
if (project.hasProperty("curseforge_apikey")) {
    apply plugin: "com.matthewprenger.cursegradle"
}

group = 'de.blutmondgilde'
/*
MAJORMOD
    Removing items, blocks, tile entities, etc.
    Changing or removing previously existing mechanics.
    Updating to a new Minecraft version.
MAJORAPI
    Changing the order or variables of enums.
    Changing return types of methods.
    Removing public methods altogether.
MINOR
    Adding items, blocks, tile entities, etc.
    Adding new mechanics.
    Deprecating public methods. (This is not a MAJORAPI increment since it doesnâ€™t break an API.)
PATCH
    Bugfixes.
 */
version = "${minecraftVersion}-1.1.3.0-Alpha"

java {
    archivesBaseName = 'OtherLivingBeings'
    toolchain.languageVersion = JavaLanguageVersion.of(16)
}

minecraft {
    mappings channel: 'parchment', version: "2021.10.17-${minecraftVersion}"

    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    runs {
        client {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'

            arg "-mixin.config=otherlivingbeings.mixins.json"

            mods {
                otherlivingbeings {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'

            arg "-mixin.config=otherlivingbeings.mixins.json"

            mods {
                otherlivingbeings {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            // The markers can be added/removed as needed separated by commas.
            // "SCAN": For mods scan.
            // "REGISTRIES": For firing of registry events.
            // "REGISTRYDUMP": For getting the contents of all registries.
            property 'forge.logging.markers', 'REGISTRIES'

            // Recommended logging level for the console
            // You can set various levels here.
            // Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
            property 'forge.logging.console.level', 'debug'

            // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
            args '--mod', 'otherlivingbeings', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

            mods {
                otherlivingbeings {
                    source sourceSets.main
                }
            }
        }
    }
}

if (project.hasProperty("curseforge_apikey")) {
    curseforge {
        apiKey = curseforge_apikey
        project {
            id = '519914'
            releaseType = 'beta'
            changelogType = 'html'
            changelog = '''<h1>There is no Changelog! Watch changes on GitHub!</h1>
<p>Current Commit: <a href=""></a></p>
<p>Last Commit: <a href="https://github.com/Blutmond-Development/Other-Living-Beings/commit/1268a6438e9064294be95fd0dc9e93973610fc52">1268a6438e9064294be95fd0dc9e93973610fc52</a></p>'''
            mainArtifact(jar) {
                relations {
                    requiredDependency 'cloth-config-forge'
                }
            }
            addGameVersion minecraftVersion
        }
    }
}

mixin {
    add sourceSets.main, "otherlivingbeings.refmap.json"
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    mavenCentral()
    // for cloth-config
    maven { url = "https://maven.shedaniel.me/" }
}

dependencies {
    minecraft 'net.minecraftforge:forge:1.17.1-37.0.103'

    annotationProcessor 'org.spongepowered:mixin:0.8:processor'
    implementation group: 'org.jetbrains', name: 'annotations', version: '22.0.0'
    compileOnly 'org.projectlombok:lombok:1.18.22'
    annotationProcessor 'org.projectlombok:lombok:1.18.22'

    implementation fg.deobf("me.shedaniel.cloth:cloth-config-forge:${clothConfig}")
}

// Example for how to get properties into the manifest for reading at runtime.
jar {
    manifest {
        attributes([
                "Specification-Title"     : "otherlivingbeings",
                "Specification-Vendor"    : "MrProfessor",
                "Specification-Version"   : "1", // We are version 1 of ourselves
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : project.version,
                "Implementation-Vendor"   : "MrProfessor",
                "MixinConfigs"            : "otherlivingbeings.mixins.json",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

jar.finalizedBy('reobfJar')
